AWSTemplateFormatVersion: '2010-09-09'
Description: Create a Lambda function and grant permissions to Amazon Bedrock service

Parameters:
  CamaraAPIExternalStackName:
    Type: String
    Default: simulated-camara-API

Resources:

  LocationRetrievalFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: location-retrieval
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      ReservedConcurrentExecutions: 5 # Set the desired value
      Code:
        S3Bucket: !Sub 'customer-agent-with-camara-api-${AWS::AccountId}'
        S3Key: my_lambda_layer.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          API_URL: !ImportValue CamaraAPIExternalApiUrl

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::customer-agent-with-camara-api-${AWS::AccountId}/*'

  BedrockInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LocationRetrievalFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'

Outputs:
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value: !GetAtt LocationRetrievalFunction.Arn